type Add<N1, N2> = [...N1, ...N2];

type Subtract<N1, N2> = N1 extends [infer Result, ...N2] ? Result : abort;

type Multiply<N1, N2, T = []> = N2 extends 0 ? Flatten<T> : Multiply<N1, Subtract<N2, 1>, [N1, ...T]>;

type Flatten<Input> = Input extends [infer A, infer B, ...infer rest] ? Flatten<[Add<A, B>, ...rest]> : Input extends [infer Value] ? Value : abort;

Multiply<50, 100>;
Add<5, 8>;
Subtract<5, 3>;