Type {
    Program = ListOf<AstItem, ";">
    comment = "// " (~"\n" any)* -- singleLineComment
        | "/*" (~"*/" any)* "*/" -- multiLineComment
    space += comment
    AstItem = TypeDeclaration | ImportDeclaration | Expression | ""
    TypeDeclaration = ("export" ?) "type " identifier "<" ListOf<TypeParameterDeclaration, ","> ">" "=" Expression
    ImportDeclaration = "import" ImportDeclarationNames "from" (~"\n" ~";" any)*
    ImportDeclarationNames = identifier -- module
        | identifier "," "{" ListOf<identifier, ","> "}" -- specificLeft
        | "{" ListOf<identifier, ","> "}" ("," identifier)? -- specificRight
    TypeParameterDeclaration = (identifier "=" Expression) -- defaultValue
        | identifier
    Expression = ParensExpression | stringExpression | ConditionExpression | CallExpression | number | ItemLiteralExpression | ArrayLiteralExpression | AbortExpression | ParameterReferenceExpression
    ParensExpression = "(" Expression ")"
    CallExpression = (identifier ".")? identifier "<" ListOf<Expression, ","> ">"
    ItemLiteralExpression = "_"
    ArrayLiteralExpression = "[" ListOf<(SpreadExpression | Expression), ","> "]"
    SpreadExpression = "..." Expression
    ConditionExpression = Expression "extends" (ArrayLiteralExpression | ExtendsExpression | Expression) "?" Expression ":" Expression
    ExtendsExpression = "[" ListOf<(inferExpression | SkipExpression | SpreadExpression | Expression), ","> "]"
    inferExpression = ("...infer" | "infer") ((" " identifier) ?)
    SkipExpression = "skip " Expression
    AbortExpression = "abort(" ("\\)" | ~")" any)* ")" --withMessage
        | "abort" -- noMessage
    stringExpression = "\"" ("\\\"" | ~"\"" any)* "\""
    ParameterReferenceExpression = identifier
    number = digit+
    reservedWord = "abort" | "infer" | "skip"
    identifier = ~reservedWord (letter | digit | "_")+
}