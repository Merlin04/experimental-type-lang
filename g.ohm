Type {
    Program = ListOf<AstItem, ";">
    AstItem = TypeDeclaration | Expression | ""
    TypeDeclaration = "type " identifier "<" ListOf<TypeParameterDeclaration, ","> ">" "=" Expression
    TypeParameterDeclaration = (identifier "=" Expression) -- defaultValue
        | identifier
    Expression = ParensExpression | ConditionExpression | CallExpression | number | ItemLiteralExpression | ArrayLiteralExpression | AbortLiteralExpression | ParameterReferenceExpression
    ParensExpression = "(" Expression ")"
    CallExpression = identifier "<" ListOf<Expression, ","> ">"
    ItemLiteralExpression = "_"
    ArrayLiteralExpression = "[" ListOf<(SpreadExpression | Expression), ","> "]"
    SpreadExpression = "..." Expression
    ConditionExpression = Expression "extends" (ArrayLiteralExpression | ExtendsExpression | Expression) "?" Expression ":" Expression
    ExtendsExpression = "[" ListOf<(inferExpression | SkipExpression | SpreadExpression | Expression), ","> "]"
    inferExpression = ("...infer" | "infer") ((" " identifier) ?)
    SkipExpression = "skip " Expression
    AbortLiteralExpression = "abort"
    ParameterReferenceExpression = identifier
    number = digit+
    reservedWord = "abort" | "infer" | "skip"
    identifier = ~reservedWord (letter | digit)+
}